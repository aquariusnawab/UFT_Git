/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘APITest2.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity26 = null;
        public BindDirection bind_dir7 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity26_Policy = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        public BindDirection bind_dir16 = null;
        public BindDirection bind_dir17 = null;
        public BindDirection bind_dir18 = null;
        public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public BindDirection bind_dir21 = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public BindDirection bind_dir24 = null;
        public BindDirection bind_dir25 = null;
        public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public BindDirection bind_dir28 = null;
        public BindDirection bind_dir29 = null;
        public BindDirection bind_dir30 = null;
        public BindDirection bind_dir31 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity22 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity22");
            _flow.DataFetchActivity19 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity19");
            _flow.DataFetchActivity16 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity16");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity18 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity18");
            _flow.DataExporterActivity21 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity21");
            _flow.DataExporterActivity24 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity24");
            _flow.DataExporterCloseActivity25 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity25");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity17 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity17");
            _flow.DataDisconnectActivity20 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity20");
            _flow.DataDisconnectActivity23 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity23");
            this.DataCursorActivity26 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity26");
            this.DataCursorActivity26_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence15 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence15");
            _flow.StServiceCallActivity7 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity7");
            _flow.StServiceCallActivity9 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity9");
            _flow.StServiceCallActivity10 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity10");
            _flow.StServiceCallActivity8 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity8");
            _flow.StServiceCallActivity11 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity11");
            _flow.DataFetchActivity22.Comment = @"";
            _flow.DataFetchActivity22.IconPath = @"";
            _flow.DataFetchActivity22.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity22.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity22_QueryParameters_Document = new XmlDocument();
            DataFetchActivity22_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity22Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>f6f98a74-3c16-4e5f-b72b-ea39b89c2846</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlightsAPI_Data!Sheet2</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>True</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlightsAPI_Data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlightsAPI_Data!Sheet2.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet2$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity22_QueryParameters_Document.LoadXml(xmlDataFetchActivity22Params);
            _flow.DataFetchActivity22.QueryParameters = DataFetchActivity22_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlightsAPI_Data!Sheet2", _flow.DataFetchActivity22);
            this.Activities.Add (_flow.DataFetchActivity22);
            _flow.DataFetchActivity19.Comment = @"";
            _flow.DataFetchActivity19.IconPath = @"";
            _flow.DataFetchActivity19.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity19.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity19_QueryParameters_Document = new XmlDocument();
            DataFetchActivity19_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity19Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>e63b448a-920f-4f37-9614-730a68ba1b03</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlightsAPI_Data!Sheet1</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>True</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlightsAPI_Data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlightsAPI_Data!Sheet1.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet1$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity19_QueryParameters_Document.LoadXml(xmlDataFetchActivity19Params);
            _flow.DataFetchActivity19.QueryParameters = DataFetchActivity19_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlightsAPI_Data!Sheet1", _flow.DataFetchActivity19);
            this.Activities.Add (_flow.DataFetchActivity19);
            _flow.DataFetchActivity16.Comment = @"";
            _flow.DataFetchActivity16.IconPath = @"";
            _flow.DataFetchActivity16.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity16.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity16_QueryParameters_Document = new XmlDocument();
            DataFetchActivity16_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity16Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>97fca75c-08de-409e-889e-0badc0fe179a</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlightsAPI_Data!API</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>True</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlightsAPI_Data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlightsAPI_Data!API.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>API$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity16_QueryParameters_Document.LoadXml(xmlDataFetchActivity16Params);
            _flow.DataFetchActivity16.QueryParameters = DataFetchActivity16_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlightsAPI_Data!API", _flow.DataFetchActivity16);
            this.Activities.Add (_flow.DataFetchActivity16);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 2 iterations";
            _flow.Loop2.NumberOfIterations = (int)2;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity26);
            _flow.Loop2.Activities.Add (_flow.Sequence15);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity18.Comment = @"";
            _flow.DataExporterActivity18.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity16.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity16,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity18.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity18);
            _flow.DataExporterActivity21.Comment = @"";
            _flow.DataExporterActivity21.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity19.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity19,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity21.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity21);
            _flow.DataExporterActivity24.Comment = @"";
            _flow.DataExporterActivity24.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity22.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity22,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataExporterActivity24.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataExporterActivity24);
            _flow.DataExporterCloseActivity25.Comment = @"";
            _flow.DataExporterCloseActivity25.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity25);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity17.Comment = @"";
            _flow.DataDisconnectActivity17.IconPath = @"";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity16.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity16,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity17.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataDisconnectActivity17);
            _flow.DataDisconnectActivity20.Comment = @"";
            _flow.DataDisconnectActivity20.IconPath = @"";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity19.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity19,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity20.InDirections.Add(bind_dir5);
            this.Activities.Add (_flow.DataDisconnectActivity20);
            _flow.DataDisconnectActivity23.Comment = @"";
            _flow.DataDisconnectActivity23.IconPath = @"";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.DataFetchActivity22.OutTable}");
            bind_dir6 = new BindDirection(_flow.DataFetchActivity22,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity23.InDirections.Add(bind_dir6);
            this.Activities.Add (_flow.DataDisconnectActivity23);
            this.DataCursorActivity26.Comment = @"";
            this.DataCursorActivity26.IconPath = @"";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi14);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.DataFetchActivity16.OutTable}");
            bind_dir7 = new BindDirection(_flow.DataFetchActivity16,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            this.DataCursorActivity26.InDirections.Add(bind_dir7);
            this.DataCursorActivity26_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity26_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity26_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity26_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity26_Policy.StartCondition.Value = "";
            this.DataCursorActivity26_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity26_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity26_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity26_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity26_Policy.EndCondition.Value = "";
            this.DataCursorActivity26_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity26_Policy.StepSize = 1;
            this.DataCursorActivity26_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity26.Policy = this.DataCursorActivity26_Policy;
            this.DataCursorActivity26.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity26.ResetCursor;
            _flow.Sequence15.Comment = @"";
            _flow.Sequence15.IconPath = @"";
            _flow.Sequence15.Name = @"Sequence15";
            _flow.Sequence15.Activities.Add (_flow.StServiceCallActivity7);
            _flow.Sequence15.Activities.Add (_flow.StServiceCallActivity9);
            _flow.Sequence15.Activities.Add (_flow.StServiceCallActivity10);
            _flow.Sequence15.Activities.Add (_flow.StServiceCallActivity8);
            _flow.Sequence15.Activities.Add (_flow.StServiceCallActivity11);
            XmlDocument StServiceCallActivity7_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity7_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity7_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity7.InputEnvelope = StServiceCallActivity7_InputEnvelope_Document;
            _flow.StServiceCallActivity7.Comment = @"";
            _flow.StServiceCallActivity7.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity7.Name = @"GetFlights";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity7.Service = @"Flights_Service";
            _flow.StServiceCallActivity7.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity7.Operation = @"GetFlights";
            _flow.StServiceCallActivity7.IsOneWay = false;
            _flow.StServiceCallActivity7.SendRequestToService=true;
            _flow.StServiceCallActivity7.FaultExpected=false;
            _flow.StServiceCallActivity7.IsAsync=false;
            _flow.StServiceCallActivity7.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity7.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity7_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity7.ExpectedOutputAttachments = StServiceCallActivity7_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity7_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity7.ExpectedFaultProperties = StServiceCallActivity7_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity7_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity7.ExpectedOutputProperties = StServiceCallActivity7_ExpectedOutputProperties_Document;
            set_StServiceCallActivity7_checkpoints(_flow.StServiceCallActivity7);
            XmlDocument StServiceCallActivity9_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity9_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity9_InputEnvelope_Document.LoadXml(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance"">
  <Body>
    <CreateFlightOrder xmlns=""HP.SOAQ.SampleApp"">
      <FlightOrder>
        <Class>{DataSource.FlightsAPI_Data!API.Class}</Class>
        <CustomerName>{DataSource.FlightsAPI_Data!API.CustomerName}</CustomerName>
        <DepartureDate>{DataSource.FlightsAPI_Data!API.DapartureDate}</DepartureDate>
        <FlightNumber>{DataSource.FlightsAPI_Data!API.FlightNumber}</FlightNumber>
        <NumberOfTickets>{DataSource.FlightsAPI_Data!API.NoOfTickets}</NumberOfTickets>
      </FlightOrder>
    </CreateFlightOrder>
  </Body>
</Envelope>");
            _flow.StServiceCallActivity9.InputEnvelope = StServiceCallActivity9_InputEnvelope_Document;
            _flow.StServiceCallActivity9.Comment = @"";
            _flow.StServiceCallActivity9.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity9.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity9.Service = @"Flights_Service";
            _flow.StServiceCallActivity9.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity9.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity9.IsOneWay = false;
            _flow.StServiceCallActivity9.SendRequestToService=true;
            _flow.StServiceCallActivity9.FaultExpected=false;
            _flow.StServiceCallActivity9.IsAsync=false;
            _flow.StServiceCallActivity9.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity9.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("NoOfTickets");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter8 = new VTDXPathSetter(pi16,XmlTypeCode.Int);
            bind_dir8 = new BindDirection(this.DataCursorActivity26,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir8);
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi17);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter9 = new VTDXPathSetter(pi18,XmlTypeCode.Int);
            bind_dir9 = new BindDirection(this.DataCursorActivity26,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir9);
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("DapartureDate");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter10 = new VTDXPathSetter(pi20,XmlTypeCode.DateTime);
            bind_dir10 = new BindDirection(this.DataCursorActivity26,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir10);
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter11 = new VTDXPathSetter(pi22,XmlTypeCode.String);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{DataSource.FlightsAPI_Data!API.CustomerName}");
            bind_dir11 = new BindDirection(this.DataCursorActivity26,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir11);
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter12 = new VTDXPathSetter(pi24,XmlTypeCode.String);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{DataSource.FlightsAPI_Data!API.Class}");
            bind_dir12 = new BindDirection(this.DataCursorActivity26,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir12);
            XmlDocument StServiceCallActivity9_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity9.ExpectedOutputAttachments = StServiceCallActivity9_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity9_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring>Flight number does not exist.</faultstring></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity9.ExpectedFaultProperties = StServiceCallActivity9_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity9_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber>0</OrderNumber><TotalPrice>0</TotalPrice></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity9.ExpectedOutputProperties = StServiceCallActivity9_ExpectedOutputProperties_Document;
            set_StServiceCallActivity9_checkpoints(_flow.StServiceCallActivity9);
            _flow.StServiceCallActivity9.CodeCheckPointEvent += _userCode.StServiceCallActivity9_OnCodeCheckPointEvent;
            _flow.StServiceCallActivity9.BeforeExecuteStepEvent += _userCode.StServiceCallActivity9_OnBeforeExecuteStepEvent;
            XmlDocument StServiceCallActivity10_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity10_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity10_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><UpdateFlightOrder xmlns=""HP.SOAQ.SampleApp""><UpdateFlightOrderDetails><Class>{DataSource.FlightsAPI_Data!API.Class}</Class><CustomerName>{DataSource.FlightsAPI_Data!API.CustomerName}</CustomerName><NumberOfTickets>{DataSource.FlightsAPI_Data!API.NoOfTickets}</NumberOfTickets><OrderNumber>{Step.OutputProperties.StServiceCallActivity9.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></UpdateFlightOrderDetails></UpdateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity10.InputEnvelope = StServiceCallActivity10_InputEnvelope_Document;
            _flow.StServiceCallActivity10.Comment = @"";
            _flow.StServiceCallActivity10.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity10.Name = @"UpdateFlightOrder";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/UpdateFlightOrder";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity10.Service = @"Flights_Service";
            _flow.StServiceCallActivity10.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity10.Operation = @"UpdateFlightOrder";
            _flow.StServiceCallActivity10.IsOneWay = false;
            _flow.StServiceCallActivity10.SendRequestToService=true;
            _flow.StServiceCallActivity10.FaultExpected=false;
            _flow.StServiceCallActivity10.IsAsync=false;
            _flow.StServiceCallActivity10.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity10.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter13 = new VTDXPathGetter(pi25,XmlTypeCode.Int);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter13 = new VTDXPathSetter(pi26,XmlTypeCode.Int);
            bind_dir13 = new BindDirection(_flow.StServiceCallActivity9,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir13);
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("NoOfTickets");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter14 = new VTDXPathSetter(pi28,XmlTypeCode.Int);
            bind_dir14 = new BindDirection(this.DataCursorActivity26,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir14);
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter15 = new VTDObjectGetter(pi29);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter15 = new VTDXPathSetter(pi30,XmlTypeCode.String);
            binding_setter15 = new StringFormaterDecorator(binding_setter15,"{DataSource.FlightsAPI_Data!API.CustomerName}");
            bind_dir15 = new BindDirection(this.DataCursorActivity26,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir15);
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter16 = new VTDObjectGetter(pi31);
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter16 = new VTDXPathSetter(pi32,XmlTypeCode.String);
            binding_setter16 = new StringFormaterDecorator(binding_setter16,"{DataSource.FlightsAPI_Data!API.Class}");
            bind_dir16 = new BindDirection(this.DataCursorActivity26,binding_getter16,binding_setter16,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir16);
            XmlDocument StServiceCallActivity10_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity10.ExpectedOutputAttachments = StServiceCallActivity10_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity10_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity10.ExpectedFaultProperties = StServiceCallActivity10_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity10_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><UpdateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><UpdateFlightOrderResult>true</UpdateFlightOrderResult></UpdateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity10.ExpectedOutputProperties = StServiceCallActivity10_ExpectedOutputProperties_Document;
            set_StServiceCallActivity10_checkpoints(_flow.StServiceCallActivity10);
            XmlDocument StServiceCallActivity8_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity8_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity8_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><CustomerName>{DataSource.FlightsAPI_Data!API.CustomerName}</CustomerName><FlightDate>{DataSource.FlightsAPI_Data!API.DapartureDate}</FlightDate><OrderNumber>{Step.OutputProperties.StServiceCallActivity9.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity8.InputEnvelope = StServiceCallActivity8_InputEnvelope_Document;
            _flow.StServiceCallActivity8.Comment = @"";
            _flow.StServiceCallActivity8.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity8.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity8.Service = @"Flights_Service";
            _flow.StServiceCallActivity8.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity8.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity8.IsOneWay = false;
            _flow.StServiceCallActivity8.SendRequestToService=true;
            _flow.StServiceCallActivity8.FaultExpected=false;
            _flow.StServiceCallActivity8.IsAsync=false;
            _flow.StServiceCallActivity8.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity8.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter17 = new VTDXPathGetter(pi33,XmlTypeCode.Int);
            VTDPropertyInfoBase pi34 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter17 = new VTDXPathSetter(pi34,XmlTypeCode.Int);
            bind_dir17 = new BindDirection(_flow.StServiceCallActivity9,binding_getter17,binding_setter17,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir17);
            VTDPropertyInfoBase pi35 = new VTDPropertyInfoBase("NoOfTickets");
            VTDBaseGetter binding_getter18 = new VTDObjectGetter(pi35);
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter18 = new VTDXPathSetter(pi36,XmlTypeCode.Int);
            bind_dir18 = new BindDirection(this.DataCursorActivity26,binding_getter18,binding_setter18,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir18);
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter19 = new VTDObjectGetter(pi37);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter19 = new VTDXPathSetter(pi38,XmlTypeCode.Int);
            bind_dir19 = new BindDirection(this.DataCursorActivity26,binding_getter19,binding_setter19,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir19);
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("DapartureDate");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi39);
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter20 = new VTDXPathSetter(pi40,XmlTypeCode.DateTime);
            bind_dir20 = new BindDirection(this.DataCursorActivity26,binding_getter20,binding_setter20,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir20);
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter21 = new VTDObjectGetter(pi41);
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter21 = new VTDXPathSetter(pi42,XmlTypeCode.String);
            binding_setter21 = new StringFormaterDecorator(binding_setter21,"{DataSource.FlightsAPI_Data!API.CustomerName}");
            bind_dir21 = new BindDirection(this.DataCursorActivity26,binding_getter21,binding_setter21,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir21);
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter22 = new VTDObjectGetter(pi43);
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter22 = new VTDXPathSetter(pi44,XmlTypeCode.String);
            binding_setter22 = new StringFormaterDecorator(binding_setter22,"{DataSource.FlightsAPI_Data!API.Class}");
            bind_dir22 = new BindDirection(this.DataCursorActivity26,binding_getter22,binding_setter22,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir22);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter23 = new VTDXPathGetter(pi45,XmlTypeCode.Int);
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter23 = new VTDXPathSetter(pi46,XmlTypeCode.Int);
            bind_dir23 = new BindDirection(_flow.StServiceCallActivity9,binding_getter23,binding_setter23,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir23);
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("DapartureDate");
            VTDBaseGetter binding_getter24 = new VTDObjectGetter(pi47);
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter24 = new VTDXPathSetter(pi48,XmlTypeCode.DateTime);
            bind_dir24 = new BindDirection(this.DataCursorActivity26,binding_getter24,binding_setter24,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir24);
            VTDPropertyInfoBase pi49 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter25 = new VTDObjectGetter(pi49);
            VTDPropertyInfoBase pi50 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter25 = new VTDXPathSetter(pi50,XmlTypeCode.String);
            binding_setter25 = new StringFormaterDecorator(binding_setter25,"{DataSource.FlightsAPI_Data!API.CustomerName}");
            bind_dir25 = new BindDirection(this.DataCursorActivity26,binding_getter25,binding_setter25,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir25);
            XmlDocument StServiceCallActivity8_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity8.ExpectedOutputAttachments = StServiceCallActivity8_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity8_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity8.ExpectedFaultProperties = StServiceCallActivity8_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity8_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightOrdersResult><FlightOrder><Class>{DataSource.FlightsAPI_Data!API.Class}</Class><CustomerName>{DataSource.FlightsAPI_Data!API.CustomerName}</CustomerName><DepartureDate>{DataSource.FlightsAPI_Data!API.DapartureDate}</DepartureDate><FlightNumber>{DataSource.FlightsAPI_Data!API.FlightNumber}</FlightNumber><NumberOfTickets>{DataSource.FlightsAPI_Data!API.NoOfTickets}</NumberOfTickets><OrderNumber>{Step.OutputProperties.StServiceCallActivity9.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightOrder></GetFlightOrdersResult></GetFlightOrdersResponse></Body></Envelope>");
            _flow.StServiceCallActivity8.ExpectedOutputProperties = StServiceCallActivity8_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter26 = new VTDObjectGetter(pi51);
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter26 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{DataSource.FlightsAPI_Data!API.Class}");
            bind_dir26 = new BindDirection(this.DataCursorActivity26,binding_getter26,binding_setter26,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi53);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter27 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{DataSource.FlightsAPI_Data!API.CustomerName}");
            bind_dir27 = new BindDirection(this.DataCursorActivity26,binding_getter27,binding_setter27,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter28 = new VTDObjectGetter(pi55);
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter28 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir28 = new BindDirection(this.DataCursorActivity26,binding_getter28,binding_setter28,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("NoOfTickets");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi57);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter29 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir29 = new BindDirection(this.DataCursorActivity26,binding_getter29,binding_setter29,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter30 = new VTDXPathGetter(pi59,XmlTypeCode.Int);
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("ExpectedOutputProperties","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter30 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir30 = new BindDirection(_flow.StServiceCallActivity9,binding_getter30,binding_setter30,BindTargetType.ToInProperty);
            set_StServiceCallActivity8_checkpoints(_flow.StServiceCallActivity8);
            XmlDocument StServiceCallActivity11_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity11_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity11_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrder xmlns=""HP.SOAQ.SampleApp""><OrderNumber>{Step.OutputProperties.StServiceCallActivity9.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></DeleteFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity11.InputEnvelope = StServiceCallActivity11_InputEnvelope_Document;
            _flow.StServiceCallActivity11.Comment = @"";
            _flow.StServiceCallActivity11.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity11.Name = @"DeleteFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/DeleteFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity11.Service = @"Flights_Service";
            _flow.StServiceCallActivity11.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity11.Operation = @"DeleteFlightOrder";
            _flow.StServiceCallActivity11.IsOneWay = false;
            _flow.StServiceCallActivity11.SendRequestToService=true;
            _flow.StServiceCallActivity11.FaultExpected=false;
            _flow.StServiceCallActivity11.IsAsync=false;
            _flow.StServiceCallActivity11.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity11.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter31 = new VTDXPathGetter(pi61,XmlTypeCode.Int);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='DeleteFlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter31 = new VTDXPathSetter(pi62,XmlTypeCode.Int);
            bind_dir31 = new BindDirection(_flow.StServiceCallActivity9,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir31);
            XmlDocument StServiceCallActivity11_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity11.ExpectedOutputAttachments = StServiceCallActivity11_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity11_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity11.ExpectedFaultProperties = StServiceCallActivity11_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity11_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><DeleteFlightOrderResult>true</DeleteFlightOrderResult></DeleteFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity11.ExpectedOutputProperties = StServiceCallActivity11_ExpectedOutputProperties_Document;
            set_StServiceCallActivity11_checkpoints(_flow.StServiceCallActivity11);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    